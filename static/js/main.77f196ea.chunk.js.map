{"version":3,"sources":["algorithm/isWinner.js","components/square/Square.js","components/board/Board.js","components/game/Game.js","components/App.js","index.js"],"names":["calculateWinner","squares","row","col","xIsNext","curPiece","line","i","j","push","length","player","t","Square","isWinning","onClick","value","className","renderSquare","renderBoard","winningSquares","r","k","includes","Board","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","setXIsNext","isAscending","setOrder","currentHistory","current","winner","moves","map","step","move","desc","location","jumpTo","newHistory","slice","concat","handleClick","reverse","App","setRow","isPreGame","setPreGame","startGame","document","getElementsByName","alert","handleCreateBoard","class","disabled","name","placeholder","type","min","max","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.77f196ea.chunk.js","sourcesContent":["function calculateWinner(squares, row, col, xIsNext) {\r\n    const curPiece = xIsNext ? 'O' : 'X';\r\n    let line = [];\r\n    //check row\r\n    for (let i = 0; i < row; i++) {\r\n        line = [];\r\n        for (let j = 0; j < col; j++) {\r\n            if (squares[col * i + j] && squares[col * i + j] == curPiece) {\r\n                line.push(col * i + j);\r\n                if (line.length == 5) {\r\n                    return {\r\n                        player: curPiece,\r\n                        line: line\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                line = [];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //check column\r\n    for (let i = 0; i < row; i++) {\r\n        line = [];\r\n        for (let j = 0; j < col; j++) {\r\n            if (squares[col * j + i] && squares[col * j + i] == curPiece) {\r\n                line.push(col * j + i);\r\n                if (line.length == 5) {\r\n                    return {\r\n                        player: curPiece,\r\n                        line: line\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                line = [];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //check right diagonal\r\n    for (let i = 0; i < row - 4; i++) {\r\n        for (let j = 4; j < col; j++) {\r\n            line = [];\r\n            for (let t = 0; t < 5; t++) {\r\n                if (squares[col * (i + t) + (j - t)] && squares[col * (i + t) + (j - t)] == curPiece) {\r\n                    line.push(col * (i + t) + (j - t));\r\n                    if (line.length == 5) {\r\n\r\n                        return {\r\n                            player: curPiece,\r\n                            line: line\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    line = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //check left diagonal\r\n    for (let i = 0; i < row - 4; i++) {\r\n        for (let j = 0; j < col - 4; j++) {\r\n            line = [];\r\n            for (let t = 0; t < 5; t++) {\r\n                if (squares[col * (i + t) + (j + t)] && squares[col * (i + t) + (j + t)] == curPiece) {\r\n                    line.push(col * (i + t) + (j + t));\r\n                    if (line.length == 5) {\r\n\r\n                        return {\r\n                            player: curPiece,\r\n                            line: line\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    line = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default calculateWinner;","import './Square.css';\r\n\r\nfunction Square({isWinning, onClick, value}) {\r\n    return (\r\n        <button className={\"square \" + (isWinning ? \"square--winning\" : null)}\r\n            onClick={onClick}\r\n        >\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square","import React from 'react';\r\nimport Square from '../square/Square';\r\nimport './Board.css'\r\n\r\nfunction Board({ winningSquares, squares, onClick, row }) {\r\n    return (\r\n        <div>\r\n            {renderBoard(squares, winningSquares, onClick, row)}\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} value\r\n * @param {*} winningSquares \r\n * @param {*} onClick \r\n * @param {*} i position\r\n * @returns square component\r\n */\r\nfunction renderSquare(value, isWinning, onClick, i) {\r\n    return (\r\n        <Square\r\n            isWinning={isWinning}\r\n            key={\"square \" + i}\r\n            value={value}\r\n            onClick={() => onClick(i)}\r\n        />\r\n    );\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} squares \r\n * @param {*} winningSquares \r\n * @param {*} onClick \r\n * @param {*} row \r\n * @param {*} col\r\n * @returns Board component\r\n */\r\nfunction renderBoard(squares, winningSquares, onClick, r) {\r\n    const row = [];\r\n    let k = 0; //key\r\n    for (let i = 0; i < r; i++) {\r\n        const col = [];\r\n        for (let j = 0; j < r; j++) {\r\n            col.push(renderSquare(squares[r * i + j], winningSquares.includes(r * i + j), onClick, r * i + j));\r\n            k++;\r\n        }\r\n        row.push(<div key={k} className=\"board-row\">{col}</div>);\r\n    }\r\n    return row\r\n}\r\n\r\n\r\nexport default Board;","import React, { useState } from \"react\";\r\nimport calculateWinner from \"../../algorithm/isWinner\";\r\nimport Board from '../board/Board';\r\nimport './Game.css';\r\n\r\nfunction Game({ row }) {\r\n    const [history, setHistory] = useState([{\r\n        squares: Array(row * row).fill(null),\r\n    }]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isAscending, setOrder] = useState(true);\r\n\r\n    function handleClick(i) {\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares, row, row) || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = xIsNext ? 'X' : 'O';\r\n        setStepNumber(newHistory.length);\r\n        setXIsNext(!xIsNext);\r\n        setHistory(newHistory.concat([{\r\n            squares: squares,\r\n            location: [i % row + 1, (i - (i % row)) / row + 1]\r\n        }]));\r\n    }\r\n\r\n    function jumpTo(step) {\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n\r\n    function sortHistory() {\r\n        setOrder(!isAscending);\r\n    }\r\n\r\n    const currentHistory = history;\r\n    const current = currentHistory[stepNumber];\r\n    const winner = calculateWinner(current.squares, row, row, xIsNext);\r\n\r\n    const moves = currentHistory.map((step, move) => {\r\n\r\n        const desc = move ?\r\n            'Go to move #' + move + ' (' + currentHistory[move].location + ')' :\r\n            'Go to game start';\r\n        return (\r\n            <li key={move}>\r\n                <button onClick={() => jumpTo(move)}>\r\n                    {move === stepNumber ? <b>{desc}</b> : desc}\r\n                </button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n        status = 'Winner: ' + winner.player;\r\n    }\r\n    else if (!current.squares.includes(null)) {\r\n        status = \"Draw\";\r\n    }\r\n    else {\r\n        status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n\r\n                <Board\r\n                    winningSquares={winner ? winner.line : []}\r\n                    squares={current.squares}\r\n                    onClick={(i) => handleClick(i)}\r\n                    row={row}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <button onClick={() => sortHistory()}>\r\n                    Sort by: {isAscending ? \"Ascending\" : \"Descending\"}\r\n                </button>\r\n                <div>{status}</div>\r\n                <ol>{isAscending ? moves : moves.reverse()}</ol>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Game;","import React, { useState } from 'react';\r\nimport Game from './game/Game';\r\nimport './header/Header.css';\r\n\r\nfunction App() {\r\n    const [row, setRow] = useState(0);\r\n    const [isPreGame, setPreGame] = useState(true);\r\n\r\n    function handleCreateBoard() {\r\n        const r = document.getElementsByName('rowValue')[0].value;\r\n        if (r < 5 || r > 20) {\r\n            alert('number of row and column must be from 5 to 20!')\r\n        }\r\n        else {\r\n            setRow(r)\r\n        }\r\n    }\r\n\r\n    function startGame() {\r\n        setPreGame(false);\r\n        handleCreateBoard();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='flex-container' >\r\n                <h1>Caro</h1>\r\n                <div class='flex-create-board'>\r\n                    <div className='padding'>\r\n                        <p>Nhập số hàng</p>\r\n                        <input disabled={!isPreGame}\r\n                            className='input' name='rowValue' placeholder='Số hàng' type='number' min='5' max='20' />\r\n                    </div>\r\n                    <button\r\n                        onClick={() => startGame()}\r\n                        disabled={!isPreGame}\r\n                        className='button'>\r\n                        Tạo bàn cờ\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {isPreGame?<></>:\r\n            <Game row={row} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}